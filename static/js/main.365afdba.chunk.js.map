{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","boxClick","index","console","log","state","playerIndex","newBoxStates","boxStates","winner","setState","disabled","currPlayerIndex","symbol","players","newPlayerIndex","win","size","win_condition","count","remainder","indexes","result","getCount","push","check","winCondition","currPlayers","colorIndexes","array","boxes","document","getElementsByClassName","i","length","style","backgroundColor","name","Array","fill","map","elem","resSize","showModal","resWinCondition","handleChange","bind","reset","handleClick","assignName","addPlayer","addBot","setWinCondition","changeWinCondition","resetColor","this","newBoxes","e","val","parseInt","target","value","newPlayers","getSymbol","num","message","player_count","grid","className","onChange","placeholder","onClick","key","height","rowIndex","Component","checkPos","totalSize","status","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.365afdba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst CURRENT = '#ffffb3'\nconst DEFAULT = 'rgb(22, 146, 125)'\nconst WIN_COLOR = '#efffcc'\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = ({\n      name: '',\n      playerIndex: 0,\n      currPlayerIndex: 0,\n      players: new Array(4).fill().map((elem, i) => ''),\n      resSize: 3,\n      size: 3,\n      symbol: 'o',\n      boxStates: new Array(9).fill().map((elem, i) => '-'),\n      showModal: false,\n      winner: null,\n      resWinCondition: 3,\n      winCondition: 3,\n      disabled: false,\n    })\n    this.handleChange = this.handleChange.bind(this)\n    this.reset = this.reset.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.boxClick = this.boxClick.bind(this)\n    this.assignName = this.assignName.bind(this)\n    this.addPlayer = this.addPlayer.bind(this)\n    this.addBot = this.addBot.bind(this)\n    this.setWinCondition = this.setWinCondition.bind(this)\n    this.changeWinCondition = this.changeWinCondition.bind(this)\n    this.colorIndexes = this.colorIndexes.bind(this)\n    this.resetColor.bind(this)\n  }\n\n  componentDidMount(){\n    this.setState({size: 3})\n  }\n\n  reset(){\n    let size = this.state.size\n    let newBoxes = new Array(size*size).fill().map((elem, i) => '-')\n    this.setState({\n      boxStates: newBoxes, currPlayerIndex: 0, \n      winner: null, disabled: false\n    })\n    this.resetColor()\n  }\n\n  resetColor(){\n    let boxes = document.getElementsByClassName('boxes')\n    for (let i=0; i < boxes.length; i++){\n      boxes[i].style.backgroundColor = DEFAULT\n    }\n  }\n\n  // Get size input \n  handleChange(e){\n    let val = parseInt(e.target.value)\n    console.log(val)\n    if (val >= 3 && val <= 9){\n      this.setState({\n        resSize: val\n      })\n    }\n  }\n\n  // Get new grid\n  handleClick(){\n    let size = this.state.resSize;\n    console.log(size)\n    this.setState({\n      size: size,\n      boxStates: new Array(size*size).fill().map((elem, i) => '-'),\n      winner: null,\n      currPlayerIndex: 0,\n      winCondition: size,\n      disabled: false\n    })\n    this.resetColor()\n  }\n  \n\n  boxClick = index =>{\n    console.log('clicked')\n    console.log('index:', index)\n\n\n    if (this.state.playerIndex < 1){ return }\n    let newBoxStates = this.state.boxStates\n    if (newBoxStates[index] === '-' && !this.state.winner){\n      // disable setWinCondition\n      this.setState({disabled: true})\n\n      // let symbol = this.state.symbol\n      let currPlayerIndex = this.state.currPlayerIndex\n      let currPlayer = this.state.players[currPlayerIndex]\n      let symbol = currPlayer[2]\n      newBoxStates[index] = symbol\n      // let newSymbol = (symbol === 'o') ? 'x' : 'o'\n      let newPlayerIndex = currPlayerIndex + 1\n      newPlayerIndex = (newPlayerIndex >= this.state.playerIndex) ? 0 : newPlayerIndex\n      this.setState({\n        currPlayerIndex: newPlayerIndex,\n        boxStates: newBoxStates,\n      })\n      // Get array of successful indexes or null \n      let win = check(newBoxStates, index, symbol, this.state.size, this.state.winCondition)\n      console.log('win', win)\n      if (win){\n        // update winner's score\n        let currPlayers = this.state.players\n        currPlayers[currPlayerIndex][1] += 1\n        this.setState({players: currPlayers, winner: currPlayers[currPlayerIndex][0]})\n        // // Add model to say winner and option to reset curr grid \n        // this.OpenModal()\n        this.colorIndexes(win)\n\n        console.log(\"Winner\")\n      }\n    }\n  }\n\n  assignName(e){\n    this.setState({name: e.target.value})\n  }\n\n  addBot(){\n  \n  }\n\n  addPlayer(){\n    if (this.state.name !== '' && this.state.playerIndex < 4){\n      let newPlayers = this.state.players\n      let index = this.state.playerIndex\n      let symbol = getSymbol(index)\n      // store [name, score, symbol]\n      newPlayers[index] = [this.state.name, 0, symbol]\n      this.setState({\n        playerIndex: index + 1,\n        players: newPlayers\n      })\n    }\n  }\n\n  setWinCondition(e){\n    let num = parseInt(e.target.value)\n    if (num >= 3 && num <= this.state.size){\n      this.setState({resWinCondition: num})\n    }\n  }\n  \n  changeWinCondition(){\n    let num = this.state.resWinCondition\n    if (num >= 3 && num <= this.state.size){\n      this.setState({winCondition: num})\n    }\n  }\n\n  colorIndexes = array =>{\n    let boxes = document.getElementsByClassName('boxes')\n    for(let i =0; i< array.length; i++){\n      boxes[array[i]].style.backgroundColor = WIN_COLOR\n    }\n  }\n\n  render(){\n    let message = this.state.winner ? 'Winner: '+this.state.winner : 'Tic-Tac-Toe'\n    let size = this.state.size\n    let player_count = this.state.playerIndex\n    console.log('size', size)\n    let grid = new Array(size).fill().map((elem, i) => i)\n\n    return (\n      <div className='main'>\n        {/* <MyModal showModal={this.state.showModal} closeModal={this.CloseModal}/> */}\n        <div className='header'>\n          <label className='label1'>Grid Size: </label>\n          <input onChange={this.handleChange} placeholder='3 -> 9'/>\n          <label className='btn' onClick={this.handleClick}>Submit</label>\n          <div className='add_player'>\n            <input onChange={this.assignName} placeholder='Bob'/>\n            <label className='btn' onClick={this.addPlayer}>Add Player</label>\n            {/* <label className='btn' onClick={this.addBot}>Add Bot</label> */}\n          </div>\n          <div className='win_condition'>\n            <label className='win-label'>Win Condition:</label>\n            <input onChange={this.setWinCondition} placeholder='3 -> size'\n            disabled={this.state.disabled}/>\n            <label className='btn' onClick={this.changeWinCondition}>Submit</label>\n          </div>\n          <label className='reset btn' onClick={this.reset}>Reset</label>\n        </div>\n        <div className='msg'>{message}</div>\n        <div>\n          <div className='instr'>Begin by adding 2 players</div>\n          <div className='display_win_condition'>\n            <div className='statement'>Win Condition:</div> \n            <div className='num'>{this.state.winCondition}</div>\n          </div>\n          <div className='display_grid_size'>\n            <div className='statement'>Grid Size:</div> \n            <div className='grid_size'>{this.state.size}X{this.state.size}</div>\n          </div>\n        </div>\n        <div className='body'>\n          <div className='players'>\n            {[...Array(player_count)].map((e, i) => (\n                <div className='player' key={`p${i}`} style={{height: `${100/player_count}%`}}>\n                  <label className='player-name' \n                  style={{backgroundColor: i === this.state.currPlayerIndex ? CURRENT : DEFAULT}}>\n                    {this.state.players[i][0]}, symbol: {this.state.players[i][2]}\n                  </label>\n                  <label className='score'>{this.state.players[i][1]}</label>\n                </div>\n            ))}\n          </div>\n          <div className='grid'>\n            {grid.map((elem, rowIndex) => (\n                <div key={`row${rowIndex}`} className='row'\n                style={{height: `${(100/size)}%`}}>\n                  {/* Each row will have size amount of columns */}\n                  dasdsa\n                  {[...Array(size)].map((e, index) => (\n                    // index + (size*rowIndex) = unique index from 0-8 for 3x3 grid\n                    //key={index + (size*rowIndex)}\n                    <label \n                    className='boxes'\n                    onClick={() => this.boxClick(index + (size*rowIndex))}\n                    style={{width: `${(100/size)}%`}}>\n                      {/* style={{width: `${(100/this.state.size)}%`}}  */}\n                      {this.state.boxStates[index + (size*rowIndex)]}\n                    </label>\n                  ))}\n                </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n\n// returns the symbol for the corresponding player \nfunction getSymbol(index){\n  let symbols = ['o', 'x', 's', 'q']\n  return symbols[index]\n}\n// check if pos is out of bounds\nfunction checkPos(index, totalSize){\n  if (index < 0 || index >= totalSize){\n    return false\n  }\n  return true\n}\n\n// remainder === 0 means elem on first column \n// remainder === size-1 means elem on last column \n// returns count of consecutive symbols\n// returns a list of the symbols' index \nfunction getCount(grid, index, status, size, symbol){\n  let count = 0\n  let indexes = []\n  let totalSize = size*size\n  while(checkPos(index, totalSize)){\n    let remainder = index % size\n    if (grid[index] === symbol){ \n      count++ \n      indexes.push(index)\n    }\n    else{ break }\n\n    if (status === 'up'){ index -= size}\n    else if (status === 'down'){ index += size}\n    else if (status === 'left'){\n      // left most side so done \n      if (remainder === 0){ break }\n      // else continue going left\n      index--\n    }\n    else if (status === 'right'){\n      if (remainder === size-1) { break }\n      index++\n    }\n    else if (status === 'diag1-left'){ \n      if (remainder === 0){ break }\n      index -= (size+1) \n    }\n    else if (status === 'diag1-right'){ \n      if (remainder === size-1) { break }\n      index += (size+1) \n    }\n    else if (status === 'diag2-left'){ \n      if (remainder === 0){ break }\n      index += (size-1) \n    }\n    else if (status === 'diag2-right'){ \n      if (remainder === size-1) { break }\n      index -= (size-1) \n    }\n  }\n  return [count, indexes]\n}\n\nfunction check(boxStates, index, symbol, size, win_condition){\n  // curr position is symbol, so count = 1\n  let count = 1 \n  let remainder = index % size\n  let indexes = [index]\n  // vertically\n  // up\n  let result = getCount(boxStates, index-size, 'up', size, symbol)\n  count += result[0]\n  indexes.push(...result[1])\n  console.log('up', count)\n  // down\n  result = getCount(boxStates, index+size, 'down', size, symbol)\n  count += result[0]\n  indexes.push(...result[1])\n  console.log('down', count)\n  console.log('vert', count)\n  if (count === win_condition){ return indexes}\n  count = 1\n  indexes = [index]\n\n  // horizontally\n  // left\n  if (remainder !== 0){\n    result = getCount(boxStates, index-1, 'left', size, symbol)\n    count += result[0]\n    indexes.push(...result[1])\n    console.log('left', count)\n  }\n  // right\n  if (remainder !== (size-1)){\n    result = getCount(boxStates, index+1, 'right', size, symbol)\n    count += result[0]\n    indexes.push(...result[1])\n    console.log('right', count)\n  }\n  console.log('horz', count)\n  if (count === win_condition){ return indexes}\n  count = 1\n  indexes = [index]\n\n  // slope down diagonal\n  // diag-left\n  if (remainder !== 0){\n    result = getCount(boxStates, index-(size+1), 'diag1-left', size, symbol)\n    count += result[0]\n    indexes.push(...result[1])\n    console.log('diag1-left', count)\n  }\n  // diag-right\n  if (remainder !== (size-1)){\n    result = getCount(boxStates, index+(size+1), 'diag1-right', size, symbol)\n    count += result[0]\n    indexes.push(...result[1])\n    console.log('diag1-right', count)\n  }\n  console.log('diag1', count)\n  console.log('win_cond:', win_condition)\n  if (count === win_condition){ return indexes}\n  count = 1\n  indexes = [index]\n\n  // slope up diagonal \n  // diag-left\n  if (remainder !== 0){\n    result = getCount(boxStates, index+(size-1), 'diag2-left', size, symbol)\n    count += result[0]\n    indexes.push(...result[1])\n    console.log('diag2-left', count)\n  }\n  // diag-right\n  if (remainder !== (size-1)){\n    result = getCount(boxStates, index-(size-1), 'diag2-right', size, symbol)\n    count += result[0]\n    indexes.push(...result[1])\n    console.log('diag2-right', count)\n  }\n  console.log('diag2', count)\n  if (count === win_condition){ return indexes}\n\n  return null\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}